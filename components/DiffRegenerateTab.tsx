'use client';

import React, { useState } from 'react';
import { Version } from '@/lib/types';
import { diffWords } from 'diff';

interface DiffRegenerateTabProps {
  currentVersion: Version;
  alternatives: Version[]; // Alternative versions generated by AI
  onSelectAlternative: (versionId: string) => void;
  onGenerateMore: () => void;
  onAcceptAlternative: (versionId: string) => void;
}

/**
 * Diff & Regenerate Tab (GitHub-style)
 * - Side-by-side comparison of alternatives
 * - Can generate more options
 * - Select and Accept to choose a winner
 */
export default function DiffRegenerateTab({
  currentVersion,
  alternatives,
  onSelectAlternative,
  onGenerateMore,
  onAcceptAlternative,
}: DiffRegenerateTabProps) {
  const [selectedAltId, setSelectedAltId] = useState<string | null>(
    alternatives[0]?.id || null
  );

  const selectedAlternative = alternatives.find((v) => v.id === selectedAltId);

  const handleSelect = (versionId: string) => {
    setSelectedAltId(versionId);
    onSelectAlternative(versionId);
  };

  const handleAccept = () => {
    if (selectedAltId) {
      onAcceptAlternative(selectedAltId);
    }
  };

  return (
    <div className="flex h-full flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-3 flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">
            Diff & Regenerate
          </h2>
          <p className="text-xs text-gray-500 mt-1">
            Compare alternatives and select the best version
          </p>
        </div>
        <div className="flex gap-2">
          <button
            onClick={onGenerateMore}
            className="px-4 py-2 text-sm font-medium text-purple-600 bg-purple-50 rounded hover:bg-purple-100"
          >
            + Generate More Options
          </button>
          <button
            onClick={handleAccept}
            disabled={!selectedAltId}
            className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Accept Selected
          </button>
        </div>
      </div>

      {/* Alternative Tabs */}
      <div className="bg-white border-b border-gray-200 px-6 py-2 flex gap-2 overflow-x-auto">
        {alternatives.map((alt, index) => (
          <button
            key={alt.id}
            onClick={() => handleSelect(alt.id)}
            className={`px-4 py-2 text-sm font-medium rounded-t transition-colors ${
              selectedAltId === alt.id
                ? 'bg-purple-100 text-purple-700 border-b-2 border-purple-600'
                : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            Alternative {index + 1}
            {alt.isStarred && ' ‚≠ê'}
          </button>
        ))}
      </div>

      {/* Side-by-Side Comparison */}
      {selectedAlternative && (
        <div className="flex-1 overflow-auto">
          <SideBySideComparison
            leftVersion={currentVersion}
            rightVersion={selectedAlternative}
          />
        </div>
      )}

      {alternatives.length === 0 && (
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <p className="text-gray-500 mb-4">No alternatives yet</p>
            <button
              onClick={onGenerateMore}
              className="px-4 py-2 text-sm font-medium text-white bg-purple-600 rounded hover:bg-purple-700"
            >
              Generate Alternatives
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

/**
 * Side-by-Side Comparison Component (GitHub-style)
 */
function SideBySideComparison({
  leftVersion,
  rightVersion,
}: {
  leftVersion: Version;
  rightVersion: Version;
}) {
  // Strip HTML for text comparison
  const stripHTML = (html: string) => {
    const div = document.createElement('div');
    div.innerHTML = html;
    return div.textContent || '';
  };

  const leftText = stripHTML(leftVersion.content);
  const rightText = stripHTML(rightVersion.content);

  // Calculate word-level diff
  const diff = diffWords(leftText, rightText);

  // Split into lines for side-by-side display
  const leftLines: { text: string; type: 'normal' | 'removed' | 'changed' }[] = [];
  const rightLines: { text: string; type: 'normal' | 'added' | 'changed' }[] = [];

  let leftBuffer = '';
  let rightBuffer = '';

  diff.forEach((part) => {
    if (part.removed) {
      leftBuffer += part.value;
    } else if (part.added) {
      rightBuffer += part.value;
    } else {
      // Flush buffers first
      if (leftBuffer) {
        leftLines.push({ text: leftBuffer, type: 'removed' });
        leftBuffer = '';
      }
      if (rightBuffer) {
        rightLines.push({ text: rightBuffer, type: 'added' });
        rightBuffer = '';
      }
      // Add unchanged text
      leftLines.push({ text: part.value, type: 'normal' });
      rightLines.push({ text: part.value, type: 'normal' });
    }
  });

  // Flush remaining buffers
  if (leftBuffer) {
    leftLines.push({ text: leftBuffer, type: 'removed' });
  }
  if (rightBuffer) {
    rightLines.push({ text: rightBuffer, type: 'added' });
  }

  return (
    <div className="flex h-full">
      {/* Left Side - Current Version */}
      <div className="flex-1 border-r border-gray-300">
        <div className="bg-red-50 border-b border-red-200 px-4 py-2">
          <span className="text-sm font-medium text-red-800">
            {leftVersion.number} (Current)
          </span>
        </div>
        <div className="p-6 font-mono text-sm whitespace-pre-wrap">
          {leftLines.map((line, i) => (
            <div
              key={i}
              className={
                line.type === 'removed'
                  ? 'bg-red-100 text-red-800'
                  : line.type === 'changed'
                  ? 'bg-yellow-100 text-yellow-800'
                  : ''
              }
            >
              {line.type === 'removed' && <span className="text-red-600">- </span>}
              {line.text}
            </div>
          ))}
        </div>
      </div>

      {/* Right Side - Alternative Version */}
      <div className="flex-1">
        <div className="bg-green-50 border-b border-green-200 px-4 py-2">
          <span className="text-sm font-medium text-green-800">
            {rightVersion.number} (Alternative)
          </span>
        </div>
        <div className="p-6 font-mono text-sm whitespace-pre-wrap">
          {rightLines.map((line, i) => (
            <div
              key={i}
              className={
                line.type === 'added'
                  ? 'bg-green-100 text-green-800'
                  : line.type === 'changed'
                  ? 'bg-yellow-100 text-yellow-800'
                  : ''
              }
            >
              {line.type === 'added' && <span className="text-green-600">+ </span>}
              {line.text}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

